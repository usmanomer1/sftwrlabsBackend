/*
 * Decompiled with CFR 0.152.
 * 
 * Could not load the following classes:
 *  org.springframework.beans.factory.annotation.Value
 *  org.springframework.http.HttpEntity
 *  org.springframework.http.HttpHeaders
 *  org.springframework.http.HttpMethod
 *  org.springframework.http.ResponseEntity
 *  org.springframework.stereotype.Service
 *  org.springframework.util.MultiValueMap
 *  org.springframework.web.client.RestTemplate
 */
package usman.springboot.sftwrlabs.sftwrlabsbackend.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;
import usman.springboot.sftwrlabs.sftwrlabsbackend.service.ISlackService;

@Service
public class SlackService
implements ISlackService {
    @Value(value="${slack.webhook.url}")
    private String slackWebhookUrl;

    @Override
    public void sendMessageToSlackWithBlocks(String message, List<Map<String, Object>> blocks) {
        RestTemplate restTemplate = new RestTemplate();
        HttpHeaders headers = new HttpHeaders();
        headers.set("Content-Type", "application/json");
        HashMap<String, Object> requestBody = new HashMap<String, Object>();
        requestBody.put("text", message);
        requestBody.put("blocks", blocks);
        HttpEntity entity = new HttpEntity(requestBody, (MultiValueMap)headers);
        ResponseEntity response = restTemplate.exchange(this.slackWebhookUrl, HttpMethod.POST, entity, String.class, new Object[0]);
        if (!response.getStatusCode().is2xxSuccessful()) {
            throw new RuntimeException("Failed to send message to Slack: " + (String)response.getBody());
        }
    }

    @Override
    public List<Map<String, Object>> buildSlackMessageBlocks(String message) {
        ArrayList<Map<String, Object>> blocks = new ArrayList<Map<String, Object>>();
        HashMap<String, Object> headerBlock = new HashMap<String, Object>();
        headerBlock.put("type", "header");
        headerBlock.put("text", Map.of("type", "plain_text", "text", "\ud83c\udf89 New Client Created!", "emoji", true));
        blocks.add(headerBlock);
        HashMap<String, Object> sectionBlock = new HashMap<String, Object>();
        sectionBlock.put("type", "section");
        sectionBlock.put("text", Map.of("type", "mrkdwn", "text", message));
        blocks.add(sectionBlock);
        HashMap<String, String> dividerBlock = new HashMap<String, String>();
        dividerBlock.put("type", "divider");
        blocks.add(dividerBlock);
        HashMap<String, Object> contextBlock = new HashMap<String, Object>();
        contextBlock.put("type", "context");
        contextBlock.put("elements", List.of(Map.of("type", "mrkdwn", "text", "*Generated by SFTWR Labs Backend System*")));
        blocks.add(contextBlock);
        return blocks;
    }
}
